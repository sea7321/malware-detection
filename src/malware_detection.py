# Third-Party Imports
import argparse
import logging

from colorama import init
from termcolor import colored

# Local Imports
from classifiers import decision_tree, svm, mlp, load_classifier
from preprocessing import preprocess


def main():
    # parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--load", action='store_true', help="load in classifiers from files")
    parser.add_argument("-v", "--verbose", dest="verbosity", action="count", default=0,
                        help="verbosity level between 0-4 (CRITICAL=0, ERROR=1, WARN=2, INFO=3, "
                             "DEBUG=4)")
    args = parser.parse_args()

    # set up logging
    log_levels = {0: logging.CRITICAL, 1: logging.ERROR, 2: logging.WARN, 3: logging.INFO, 4: logging.DEBUG}
    logging.basicConfig(level=log_levels[args.verbosity])

    # initialize colorama
    init()

    # preprocess data
    print(colored("[*] Preprocessing data...", "blue"))
    #preprocess()

    # load/run the classifiers
    if args.load:
        # load the decision tree classifier
        print(colored("[*] Loading the decision tree (DT) model...", "blue"))
        load_classifier("dt")

        # load the svm classifier
        print(colored("[*] Loading the support vector machine (SVM) model...", "blue"))
        load_classifier("svm")

        # load the mlp classifier
        print(colored("[*] Loading the multilayer perceptron (MLP) model...", "blue"))
        load_classifier("mlp")
    else:
        # run the decision tree classifier
        print(colored("[*] Running the decision tree (DT) model...", "blue"))
        decision_tree()

        # run the svm classifier
        print(colored("[*] Running the support vector machine (SVM) model...", "blue"))
        svm()

        # run the mlp classifier
        print(colored("[*] Running the multilayer perceptron (MLP) model...", "blue"))
        mlp()


if __name__ == "__main__":
    main()
