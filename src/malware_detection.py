"""
File: malware_detection.py
Author: Savannah Alfaro, sea2985
"""
# Third-Party Imports
import argparse
from colorama import init
from termcolor import colored

# Local Imports
from train import decision_tree, svm, mlp
from classify import classify
from update import update
from preprocessing import preprocess


def main():
    # parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--train", action='store_true', help="create, train, and save the models")
    parser.add_argument("-c", "--classify", action='store', nargs=1, help="classify an attack from pre-saved models")
    parser.add_argument("-u", "--update", action='store', nargs=2, help="update data with a goodware/malware sample")
    args = parser.parse_args()

    # initialize colorama
    init()

    if args.train:
        # preprocess data
        print(colored("[*] Preprocessing data...", "blue"))
        preprocess()

        # run the decision tree classifier
        print(colored("[*] Running the decision tree (DT) model...", "blue"))
        decision_tree()

        # run the svm classifier
        print(colored("[*] Running the support vector machine (SVM) model...", "blue"))
        svm()

        # run the mlp classifier
        print(colored("[*] Running the multilayer perceptron (MLP) model...", "blue"))
        mlp()

    if args.classify:
        # run the decision tree classifier
        print(colored("[*] Running the decision tree (DT) model against {}...".format(args.classify[0]), "blue"))
        classify("dt", args.classify[0])

        # run the svm classifier
        print(colored("[*] Running the support vector machine (SVM) model against {}...".format(args.classify[0]), "blue"))
        classify("svm", args.classify[0])

        # run the mlp classifier
        print(colored("[*] Running the multilayer perceptron (MLP) model against {}...".format(args.classify[0]), "blue"))
        classify("mlp", args.classify[0])

    if args.update:
        # add test file to existing training set
        print(colored("[*] Updating data...", "blue"))
        updated = update(args.update[0], args.update[1])

        # only preprocess data and run classifiers if data was updated
        if updated:
            # preprocess data
            print(colored("[*] Preprocessing data...", "blue"))
            preprocess()

            # run the decision tree classifier
            print(colored("[*] Running the decision tree (DT) model...", "blue"))
            decision_tree()

            # run the svm classifier
            print(colored("[*] Running the support vector machine (SVM) model...", "blue"))
            svm()

            # run the mlp classifier
            print(colored("[*] Running the multilayer perceptron (MLP) model...", "blue"))
            mlp()


if __name__ == "__main__":
    main()
