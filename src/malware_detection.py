# Third-Party Imports
import argparse
import logging

from colorama import init
from termcolor import colored

# Local Imports
from train import decision_tree, svm, mlp
from classify import classify
from update import update
from preprocessing import preprocess


def main():
    # parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--train", action='store_true', help="load in classifiers from files")
    parser.add_argument("-c", "--classify", action='store', nargs=1, help="load in classifiers from files")
    parser.add_argument("-u", "--update", action='store', nargs=2, help="load in classifiers from files")
    parser.add_argument("-v", "--verbose", dest="verbosity", action="count", default=0,
                        help="verbosity level between 0-4 (CRITICAL=0, ERROR=1, WARN=2, INFO=3, DEBUG=4)")
    args = parser.parse_args()

    # set up logging
    log_levels = {0: logging.CRITICAL, 1: logging.ERROR, 2: logging.WARN, 3: logging.INFO, 4: logging.DEBUG}
    logging.basicConfig(level=log_levels[args.verbosity])

    # initialize colorama
    init()

    if args.train:
        # preprocess data
        print(colored("[*] Preprocessing data...", "blue"))
        preprocess()

        # run the decision tree classifier
        print(colored("[*] Running the decision tree (DT) model...", "blue"))
        decision_tree()

        # run the svm classifier
        print(colored("[*] Running the support vector machine (SVM) model...", "blue"))
        svm()

        # run the mlp classifier
        print(colored("[*] Running the multilayer perceptron (MLP) model...", "blue"))
        mlp()

    if args.classify:
        # load the decision tree classifier
        print(colored("[*] Loading the decision tree (DT) model...", "blue"))
        classify("dt", args.classify)

        # load the svm classifier
        print(colored("[*] Loading the support vector machine (SVM) model...", "blue"))
        classify("svm", args.classify)

        # load the mlp classifier
        print(colored("[*] Loading the multilayer perceptron (MLP) model...", "blue"))
        classify("mlp", args.classify)

    if args.update:
        # add malware to existing training set
        update(args.update[0], args.update[1])

        # preprocess data
        print(colored("[*] Preprocessing data...", "blue"))
        preprocess()

        # run the decision tree classifier
        print(colored("[*] Running the decision tree (DT) model...", "blue"))
        decision_tree()

        # run the svm classifier
        print(colored("[*] Running the support vector machine (SVM) model...", "blue"))
        svm()

        # run the mlp classifier
        print(colored("[*] Running the multilayer perceptron (MLP) model...", "blue"))
        mlp()


if __name__ == "__main__":
    main()
