"""
File: classify.py
Description: Classifies attack data on pre-saved models.
Author: Savannah Alfaro, sea2985
"""
# Standard Imports
import time

# Third-Party Imports
import pandas as pd
import pickle
import pefile
from termcolor import colored


def to_csv(filename):
    # variables
    function_calls = list()

    print("\tLoading in the data...")
    data = pd.read_csv('../data/training_data.csv')
    blah_data = data.drop('malware', axis=1)
    columns = blah_data.columns.values.tolist()

    # gather all function calls
    try:
        pe = pefile.PE(filename)
        if hasattr(pe, "DIRECTORY_ENTRY_IMPORT"):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                for function_call in entry.imports:
                    function_calls.append(function_call.name.decode('utf-8'))
    except Exception:
        raise Exception("Error listing function calls within {}".format(filename))

    # TODO: Need to check to see if hash already in dataframe

    # append new row to dataframe
    new_row = list()
    for column in columns:
        if column in function_calls:
            new_row.append(1)
        else:
            new_row.append(0)

    # TODO: Fix if malware or not, specifying as malware for rn
    new_row.append(0)
    data.loc[len(data)] = new_row
    data.tail(1).to_csv(r'../data/new_training_data.csv', index=False)


def classify(classifier_name, testing_filename):
    """
    Classifies an attack with the provided pre-saved classifier model.
    :param classifier_name: (String) the classifier name
    :param testing_filename: (String) the testing filename
    :return: None
    """
    # start the timer
    start = time.time()

    # transform the executable file into a csv file
    to_csv(testing_filename)

    # load in the training model
    classifier = pickle.load(open("./models/{}_model.pickle".format(classifier_name), "rb"))

    # load the testing data
    print("\tLoading in the data from {}...".format('../data/new_training_data.csv'))
    data = pd.read_csv('../data/new_training_data.csv')

    # split the testing data into features and the target variable
    X_test = data.drop('malware', axis=1)
    y_test = data['malware']

    # make predictions on the test data
    print("\tMaking predictions on the testing data...")
    y_pred = classifier.predict(X_test)
    end = time.time()

    # malware prediction
    if y_pred[0] == 1:
        print(colored("\tLikely malware", "red"))
    else:
        print(colored("\tNot likely malware", "yellow"))

    # calculate the accuracy of the model
    print(colored("\tTime: {:.4f} seconds\n".format(end - start), "green"))